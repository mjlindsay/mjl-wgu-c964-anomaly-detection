services:
  otel:
    image: otel/opentelemetry-collector-contrib:0.119.0
    ports:
      - 4318:4318
      - 4317:4317
      - 4319:4319
      - 4320:4320
      - 9001:9001
    volumes:
      - type: bind
        source: ./otel-config.yaml
        target: /etc/otelcol-contrib/config.yaml
        read_only: true
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
      - 9094:9094
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094,
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 15s
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    volumes:
      - ./kui_config.yaml:/etc/kafkaui/dynamic_config.yaml
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prom-config.yaml:/etc/prometheus/prometheus.yml
      - ./prometheus-data/:/prometheus
  grafana:
    container_name: grafana
    image: &grafanaImage grafana/grafana-enterprise
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 15s
    ports:
      - 9000:9000
    volumes:
      - ./grafana-data/:/var/lib/grafana
      - ./grafana-config.ini:/etc/grafana/grafana.ini
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana-dashboard-provisioning.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana-dashboards/:/var/lib/grafana/dashboards
  grafana-provisioning:
    container_name: grafana-provisioning
    image: alpine/curl
    entrypoint:
      - sh
      - -c
      - |
        sleep 15 && # Give Grafana time to fully initialize
        curl -v \
          --request POST \
          --url http://grafana:9000/api/dashboards/uid/cegz20kg0qry8c/public-dashboards/ \
          --header "content-type: application/json" \
          --data '{"uid": "00000000-0000-0000-0000-000000000000","accessToken": "a61e3b49d6ac45a1a6e94a2f9d43548c","isEnabled": true,"timeSelectionEnabled": true}'
    depends_on:
      grafana:
        condition: service_healthy
        restart: true
  tempo-init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200:3200" # tempo
      - "4321:4321" # otlp grpc
    depends_on:
      - tempo-init
  model:
    image: michaellindsayj/wgu-c964:hst-model-v0.0.3
    environment:
      - OTLP_HOST=http://otel:4319
      - KAFKA_HOST=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
  anomaly-api:
    image: michaellindsayj/wgu-c964:anomaly-api-v0.0.3
    ports:
      - 5258:5258
    depends_on:
      otel:
        condition: service_started
        restart: true
  anomaly-ui:
    image: michaellindsayj/wgu-c964:anomaly-ui-v0.0.1
    environment:
      - GRAFANA_DASHBOARD_PATH=/d/cegz20kg0qry8c/anomaly-count-comparison?orgId=1&from=now-1m&to=now&timezone=browser&refresh=30s&kiosk
    ports:
      - 80:80
    depends_on:
      anomaly-api:
        condition: service_healthy
        restart: true